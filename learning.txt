                      *** Yes good old text files ***
                      -------------------------------

-------------------------------------------------------------------------------
Created by: Sinan Islekdemir
            sinan@islekdemir.com
            2022

-------------------------------------------------------------------------------

Programming with eXLang.

exLang resembles Assemly language to a degree. Unlike usual programming
languages, we do not have any variables. Instead, we have a shared memory
location which we control byte by byte.

-------------------------------------------------------------------------------

Syntax:

section:   <--- SECTION NAME
<Statement> <Arg1> <Arg2> <Arg3>
<Statement> <Arg1> <Arg2> <Arg3>

To make it easier for eyes, you can use indents as:

section:
    <STATEMENT> <ARG1> <ARG2>
    <STATEMENT> <ARG1> <ARG2>

-------------------------------------------------------------------------------

        Memory Addresses

     Almost all commands get arguments by memory addresses. eXLang is a
statically typed language without variables. You can define the arguments
type by type notation at the address.

     Long: Memory addresses that are read as a long end with `l`.
           Example: 10l

     Double: Memory addresses that are read as a double end with 'f'.
             This notation is decided to avoid any confusion with %d in
             printf.
             Example: 10f

     String: String addresses that are read as char arrays end with 's'.
             They are either read with given sizes or until the 0 byte.

DATA TYPES:

     BYTE: Bytes occupy 1 byte in memory.
           You can define 1 byte in two ways.
           1. Hexedecimal as : 0x41
           2. String as      : "A"

     NUMBER: By default, numbers are stored as double or long.

     STRING: Strings are simply byte arrays.

-------------------------------------------------------------------------------

CONSTANTS:

     There are some constants that you can store in memory for future use.
     Most of them are inherited from Arduino Library.

          HIGH
          LOW
          RISING
          FALLING
          INPUT
          OUTPUT
          INPUT_PULLUP
          PI
          HALF_PI
          TWO_PI
          DEG_TO_RAD
          RAD_TO_DEG
          EULER

     You need to store it in a DATA area to use.
     Example:

     main:
         DATA 10f TWO_PI
         SPRINTLN 10f

-------------------------------------------------------------------------------

         !!!! MAIN ENTRY POINT FOR A CODE IS THE "main:" SECTION.!!!!
         Your code must include main: to run.

         Example:
         main:
             DATA 10 "hi!"
             SPRINTLN 10s
             HALT

         ADDRESSES ARE DEFINED BY <INT>(s/l/f) NOTATION.
         Ex: 100s points to 100th byte as string.

-------------------------------------------------------------------------------

                   List of registered standard statements.
                   ***************************************

    DATA:     Used to store constants in memory area.
              Expects 2 Arguments.
              DATA <ADDRESS> <DATA>

              Example:
              DATA 100 "Hello world"

              Stores "Hello world" starting from byte 100 in memory.

              -----------------------------------------------------------------

    SET:      Used to copy a variable from one position to another.
              Expects 2 Arguments
              SET <TARGET> <SOURCE>

              Example:
              DATA 100 "Hello world"
              SET 200s 100s
              SPRINTLN 200s

              Output:
              Hello world
              -----------------------------------------------------------------

    SPRINT:   Used to write data to standard output. Serial port in
              embbedded devices. STDOUT for PC.
              Expects 1 Argument
              SPRINT <SOURCE>

              Example:
              DATA 100 "Hello world"
              DATA 150 23
              SPRINT 100s
              SPRINT 150l

              Output:
              Hello world23

              NOTE: SPRINT identifies variable type by the preceeding byte.
                    If it fails to find a proper type definition in the
                    preceeding byte, String is assumed.
              -----------------------------------------------------------------

    SPRINTLN: Same as SPRINT but adds an additional '\n' in the output.
              Expects 1 Argument
              SPRINTLN <SOURCE>

              Example:
              DATA 100 "Hello world"
              DATA 150 23
              SPRINTLN 100s
              SPRINTLN 150l

              Output:
              Hello world
              23
              -----------------------------------------------------------------

    SREADLN:  Read a line from the starndard input. Serial port in embedded
              devices.
              Expects 1 or 2 Arguments. SIZE is optional. Defaults to MAX LINE
                                                                        LENGTH
              SREADLN <TARGET> (<SIZE>)

              STDIN for PC.

              Example:

              SREADLN 100s
              -----------------------------------------------------------------

    GOTO:     Jumps to given index in the active section.
              Comments are not counted.
              Does not include type notation in the syntax as it jumps to a
              code location. Not to a memory.
              Expects 1 Argument.

              GOTO <LINE>

              Example:

              main:
                  # Set a counter
                  DATA 10 0
                  SPRINTLN 10l
                  INC 10l
                  # Going for an infinite loop.
                  GOTO 1

              Output:
              0
              1
              2
              3
              4
              ...
              -----------------------------------------------------------------

    CALL:     Jumps to given section and line.
              Expects 1 or 2 Arguments. LINE is optional. Defaults to 0
              If section is defined before, you can call it by name.
              If it is not defined yet, you can call it by it's index.

              Execution returns back to caller after CALLed section ends.

              CALL <SECTION> (<LINE>)

              Example:
              print_number:
                  SPRINT 100s
                  SPRINTLN 10l

              main:
                  DATA 10 0
                  DATA 100 "Counter at: "
                  CALL print_number
                  INC 10l
                  GOTO 2

              Output:
              Counter at: 1.000000
              Counter at: 2.000000
              ...


              Example:
              main:
                  DATA 10 0
                  DATA 100 "Counter at: "
                  # print_number is not defined yet.
                  # we have to call it by it's index, starting
                  # from 0.
                  CALL 1
                  INC 10l
                  GOTO 2

              print_number:
                  SPRINT 100s
                  SPRINTLN 10l

              -----------------------------------------------------------------

    HALT:     Halts the execution. So execution will not return back to caller.
              Program will end.
              No arguments.

              Example:
              main:
                  HALT

              -----------------------------------------------------------------

    CMP:      Compare two numbers.
              eXLang does not include a string aware comparieson (yet).
              Expectse 2 Arguments. Writes result to a hidden comparison
              register.

              Result is used for Jump statements afterwards.

              CMP <ADDRESS ONE> <ADDRESS TWO>

              Example:
              exit:
                  DATA 100 "Bye!"
                  SPRINTLN 100s
                  HALT

              main:
                  DATA 10 0
                  # target number
                  DATA 20 10
                  SPRINTLN 10l
                  INC 10l
                  CMP 10l 20l
                  JE exit
                  GOTO 2

              Output:
              0.000000
              1.000000
              2.000000
              3.000000
              4.000000
              5.000000
              6.000000
              7.000000
              8.000000
              9.000000
              Bye!
              -----------------------------------------------------------------

    JE:       Jump to given section if comparison flag is EQUALS.
              Expects 1 argument.
              SECTION an be pre-defined name or index.

              JE <SECTION>

              Example: See CMP

              -----------------------------------------------------------------

    JNE:      Jump to given section if comparison flag is NOT EQUALS

              -----------------------------------------------------------------

    JG:       Jump to given section if A > B
              Expects 1 argument

              Example:
              exit:
                  DATA 100 "Bye!"
                  SPRINTLN 100s
                  HALT

              main:
                  DATA 10 0
                  DATA 20 10
                  SPRINTLN 10l
                  INC 10l
                  CMP 10l 20l
                  JG exit
                  GOTO 2

              Output:
              0.000000
              1.000000
              2.000000
              3.000000
              4.000000
              5.000000
              6.000000
              7.000000
              8.000000
              9.000000
              10.000000
              Bye!
              -----------------------------------------------------------------

    JGE:      Jump to given section if A >= B
              -----------------------------------------------------------------

    JL:       Jump to given section if A < B
              -----------------------------------------------------------------

    JLE:      Jump to given section if A <= B
              -----------------------------------------------------------------

    INC:      Increase the given number by one. Similar to "a++"
              Expects 1 argument. Works with both Long and Double types.

              INC <TARGET>

              -----------------------------------------------------------------

    ADD:      Adds two numbers.
              Expects 3 Arguments.
              ADD <TARGET> <A> <B>

              Example:
              main:
                  DATA 10 5
                  DATA 20 9
                  ADD 30 10 20
                  SPRINTLN 30l

              Output:
              14

              -----------------------------------------------------------------

    SUB:      Substracts two numbers.
              Expects 3 arguments.
              SUB <TARGET> <A> <B>
              -----------------------------------------------------------------

    DIV       Divide two numbers.
              Expects 3 Arguments
              SUB <TARGET> <A> <B>

              NOTE: DOES NOT INCLUDE DIVISION BY ZERO GUARD. WATCH OUT FOR THAT
              -----------------------------------------------------------------

    MUL:      Multiply two given numbers.
              Expects 3 Arguments
              MUL <TARGET> <A> <B>
              -----------------------------------------------------------------

    XOR:      eXclusive OR
              Expects 3 Arguments. Only Long type is expected.
              XOR <TARGET> <A> <B>
              -----------------------------------------------------------------

    OR:       Or statement
              Expects 3 Arguments. Only Long type is expected.
              OR <TARGET> <A> <B>
              -----------------------------------------------------------------

    AND:      And statement
              Expects 3 Arguments. Only Long type is expected.
              AND <TARGET> <A> <B>
              -----------------------------------------------------------------

    POW:      Power operator. (A ** B)
              Expects 3 Arguments.
              POW <TARGET> <A> <B>
              -----------------------------------------------------------------

    SIN:      Calculate Sin of the given number.
              Expects 2 Arguments. Only Double (f) type is expected.
              SIN <TARGET> <A>

              Angles in RADIANS.

              Example:
              main:
                  DATA 10 0.523598776
                  SIN 20f 10f
                  SPRINTLN 20f

              Output:
              0.500000

              NOTE: You can use CONSTANTS for converting between degrees and
                    radians.

              Example:
              main:
                  DATA 10 30.0
                  DATA 20 DEG_TO_RAD
                  MUL 10f 20f 10f
                  SIN 30f 10f
                  SPRINTLN 30f
                  HALT

              Output:
              0.500000

              -----------------------------------------------------------------

    COS:      Calculate Cosine of the given number.

              -----------------------------------------------------------------

    TAN:      Calculates the tangent of the given number.

              -----------------------------------------------------------------

    COT:      Calculates the cotangent of the given number.

              -----------------------------------------------------------------

    SINH:     Calculates the hyperbolic sine of the given number.

              -----------------------------------------------------------------

    COSH:     Calculates the hyperbolic cosine of the given number.

              -----------------------------------------------------------------

    TANH:     Hy. Tangent.

              -----------------------------------------------------------------

    COTH:     Hy. Cotangent.

              -----------------------------------------------------------------

    ASIN:     Arc Sine

              -----------------------------------------------------------------

    ACOS:     Arc Cosine

              -----------------------------------------------------------------

    ATAN:     Arc Tangent

              -----------------------------------------------------------------

    ACOT:     Arc Cotangent

              -----------------------------------------------------------------

    ALLOC:    Allocate free space for string variable.
              Expects 2 Arguments.

              ALLOC <TARGET> <SIZE>

              Example:
              main:
                  DATA 10 128
                  ALLOC 100s 10l
                  HALT

              -----------------------------------------------------------------

    APPEND:   Append data to the end of a given data area.

              APPEND <target> <source>

              -----------------------------------------------------------------

    DEL:      Clear the given memory area.
              Expects 2 Arguments

              DEL <TARGET> <SIZE>

              Example:
              main:
                  DATA 10 "Hello world"
                  DATA 50 128
                  DEL 10s 50l
                  SPRINTLN 10s
                  HALT

              Output:
              <nothing>

              -----------------------------------------------------------------

    CPY:      Copy data from a location to another.
              Expects 3 arguments

              CPY <TARGET> <SOURCE> <SIZE>

              Example:
              main:
                  DATA 10 "Hello world"
                  DATA 30 5
                  CPY 40s 10s 30l
                  SPRINTLN 40s
                  HALT

              Output:
              Hello
              -----------------------------------------------------------------

    LROTATE:  Left rotate bits of a byte.
              Expects 2 arguments. Overwrites source. Expects byte type (s)

              LROTATE <SOURCE> <BITS>

              Example:
              main:
                  DATA 10 "A"
                  DATA 20 3
                  SPRINTLN 10s
                  LROTATE 10l 20l
                  SPRINTLN 10s
                  HALT

              Output:
              A
              10
              -----------------------------------------------------------------

    RROTATE:  Right rotate bits of a byte.
              Expects 2 arguments. Overwrites source.

              -----------------------------------------------------------------

    LSHIFT:   Left shifts bits of a byte.
              Expects 2 arguments. Overwrites source.

              -----------------------------------------------------------------

    RSHIFT:   Right shifts bits of a byte.
              Expects 2 arguments. Overwrites source.

              -----------------------------------------------------------------

    SLEEP:    Sleep in milliseconds.
              Expects 1 argument.
              NOTE: On micro devices, Sleep can be broken by an interrupt.

              Example:
              main:
                  DATA 10 "Hello"
                  DATA 20 "World"
                  DATA 30 1000
                  SPRINTLN 10s
                  SLEEP 30l
                  SPRINTLN 20s
                  HALT

              Output:
              Hello
              <waits for 1 second>
              World

              -----------------------------------------------------------------

    MILLIS:   Return now() in milliseconds.
              Expects 1 argument.
              NOTE: On micro devices, returns time since boot. On PC, returns
                    unix timestamp.


              Example:
              main:
                  DATA 10 1000
                  MILLIS 20l
                  SPRINTLN 20l
                  SLEEP 10l
                  GOTO 1
                  HALT

              -----------------------------------------------------------------
    CORE:     Returns CPU core that program runs.
              On ATMEGA and PC, returns 0.
              On ESP32, returns the assigned core.
              Expects 1 argument.

              Example:
              main:
                  CORE 10l
                  SPRINTLN 10l
                  HALT

              -----------------------------------------------------------------

    SYS:      Driver/System Interrupt.
              Additional features on eXLang are accessible through their
              registered system interrupts.
              You communicate with the drivers using their dedicated memory
              addresses.
              Expects 1 argument.

              Some of the registered call numbers on micro devices.
              FILE SYSTEM            = 1
              WIFI                   = 10
              WIFI SERVER            = 11
              SSD1306 Display        = 12
              BLUETOOTH_SERIAL       = 13
              BLUETOOTH              = 14
              SDCARD                 = 15

              Bluetooth driver uses 10 as a command base address.
              Example:
              # Initiate bluetooth scanner
              # 1 = BLEDevice::init, setActiveScan
              DATA 10 1
              SYS 14
              # 2 btScanner->start
              DATA 10 2
              SYS 14
              # Driver writes the number of found devices into @20
              SPRINTLN 20l

              -----------------------------------------------------------------

    INT:      Register a hardware interrupt on a micro device.
              Expects 3 arguments.

              INT <PIN> <STATE> <LABEL>

              Example:
              hello:
                  DATA 100 "Hello there!"
                  SPRINTLN 100s
                  CALL 1 4

              main:
                  DATA 10 "Interrupt listening on PIN 14"
                  DATA 50 INPUT_PULLUP
                  DATA 60 LOW
                  DATA 70 14
                  DATA 80 60000
                  SPRINTLN 10s
                  PINMODE 70l 50l
                  INT 70l 60l hello
                  SLEEP 80l

              -----------------------------------------------------------------

    AREAD:    Analog read operation for micro devices.
              Expects 2 arguments.

              AREAD <TARGET> <PIN>
              -----------------------------------------------------------------

    AWRITE:   Analog write operation for micro devices.
              Expects 2 arguments.

              AWRITE <PIN> <SOURCE>

              -----------------------------------------------------------------

    PINMODE:  Change pin mode on micro devices.
              Expects 2 arguments.

              PINMODE <PIN> <MODE>

              -----------------------------------------------------------------

    DWRITE:   Digital write operation for micro devices.
              Expects 2 arguments.

              DWRITE <PIN> <SOURCE>

              -----------------------------------------------------------------

    DREAD:    Digital read operation for micro devices.
              Expects 2 arguments.

              DREAD <TARGET> <PIN>

              -----------------------------------------------------------------

    RAND:     Generate a random number between given range.
              Expects 3 arguments.

              RAND <TARGET> <MIN> <MAX>

              -----------------------------------------------------------------

    NUM:      Convert string into number.
              Expects 2 arguments.

              NUM <TARGET> <SOURCE>

              Example:
              main:
                  DATA 10l "536"
                  NUM 20l 10s
                  SPRINTLN 20l
                  HALT

              Output:
              536

              -----------------------------------------------------------------

    LOCATE:   Move the program memory cursor to given location.
              There is one memory cursor register (a pointer) in a program.
              You can use the cursor to move in memory dynamically.
              This is handy for ARRAY like behavior.

              LOCATE <INDEX>

              main:
                  # Store array starting from 400
                  DATA 10 "Enter person name:"
                  DATA 35 " = "
                  DATA 50 32
                  # Pointer location
                  DATA 100 400
                  DATA 150 400
                  # counter
                  DATA 110 0
                  # target
                  DATA 120 10
                  DATA 130 0
                  CALL 1

              add_person:
                  SPRINT 10s
                  LOCATE 100l
                  # Read into 200
                  DEL 200l 50l
                  SREADLN 200s 50l
                  # Push string into pointer
                  PUSH 200s 50l
                  # Move pointer 32 bytes forward
                  ADD 100l 100l 50l
                  INC 110l
                  CMP 110l 120l
                  JE 2
                  GOTO 0

              print_all:
                  SET 110l 130l
                  # reset cursor
                  LOCATE 150l
                  DEL 200s 50l
                  PULL 200s 50l
                  SPRINTLN 200s
                  ADD 150l 150l 50l
                  INC 110l
                  CMP 110l 120l
                  JE 3
                  GOTO 1

              exit:
                  HALT
              -----------------------------------------------------------------

    PULL:     Pull data from the cursor location to given destination for the
              given amount of bytes.
              See LOCATE command to set the cursor location.

              PULL <TARGET> <SIZE>

              Example: See LOCATE

              -----------------------------------------------------------------

    PUSH:     Push data into the cursor location with the given amount of
              bytes.
              See LOCATE command to set the cursor location.

              PUSH <SOURCE> <SIZE>

              Example: See LOCATE

              -----------------------------------------------------------------
