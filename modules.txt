                        *** Regsistered Modules ***
                      -------------------------------

-------------------------------------------------------------------------------
Created by: Sinan Islekdemir
            sinan@islekdemir.com
            2022

-------------------------------------------------------------------------------

    Modules are accessed through certain memory addresses and SYS calls.
    Usually @10 is used as a command address and @20 is used as the data
        address.

    Example:
    SET 10l <value>
    SET 20l <value>
    SYS <number>

    Modules return back values using addresses, usually 20 as the data
    address.

    IMPORTANT NOTE: If your code is using modules, make sure that you do not
                    store important data in command and data areas defined by
                    the module. Usually try to use memory areas above 256 or
                    512. Otherwise, the module can overwrite your data while
                    processing.

-------------------------------------------------------------------------------

                               (1) File System

    Filesystem can be accessed through SYS 1

    DISK ACCESS COMMAND ADDRESS 10
    DISK ACCESS DATA ADDRESS    20

    Commands:

    1: Open directory
       Arguments:
       10: 1
       20: Path to open

       Return type   : Number
       Return address: 20
       Description   : Number of files in the path.
 
       Response: Number of files found in the directory. At this point, you
       need to keep it in mind to loop. So better store it.

    2: Get file details.
       Arguments:
       10: 2
       20: File Index

       Return type   : Number
       Return address: 20
       Description   : 1 if it is a directory. 0 for regular files.

       Return type   : String
       Return address: 30
       Description   : File name [256 chars]

    3: Close directory
       Arguments:
       10: 3

       Return   : None

       -----------------------------------------------------------------

       Examples:

           main:
                   DATA 1000 "Directory lister"
                   # 1 -- Open Dir
                   DATA 1030 1
                   # 2 -- Get file information
                   DATA 1040 2
                   # 3 -- Close Dir
                   DATA 1050 3
                   # File counter
                   DATA 1060 0
                   DATA 2000 "."
                   SPRINTLN 1000s
                   SET 20s 2000s
                   SET 10l 1030l
                   SYS 1
                   SET 1080l 20l
                   CALL 1

           loop_files:
                   SET 10l 1040l
                   SET 20l 1060l
                   SYS 1
                   SPRINTLN 30s
                   INC 1060l
                   CMP 1060l 1080l
                   JE 2
                   GOTO 0

           exit:
                   HALT

       -----------------------------------------------------------------

    4: Open file for reading
       Arguments:
       10: 4
       20: Filename

       Return type   : Number
       Return address: 20
       Description   : eXLang has 16 file pointers you can use,
                       file open returns the used pointer index

       Return type   : Number
       Return address: 30
       Description   : File size in bytes

    5: Open file for writing
       Arguments:
       10: 5
       20: Filename

       Return type   : Number
       Return address: 20
       Description   : eXLang has 16 file pointers you can use,
                       file open returns the used pointer index

       Return type   : Number
       Return address: 30
       Description   : File size in bytes

    6: Set file cursor location (aka fseek)
       Arguments:
       10: 6
       20: File index
       30: Cursor location

       Return        : None

    7: Read from file
       Arguments:
       10: 7
       20: File index
       30: Size in bytes

       Return type   : Number
       Return address: 20
       Description   : EOF (0 if cursor has reached the end of the file)

       Return type   : String|Byte array
       Return address: 30
       Description   : Data buffer

    8: Write into file
       Arguments:
       10: 8
       20: File index
       30: Size in bytes
       40: Data

       Return        : None

    9: Close file
       Arguments:
       10: 9
       20: File index

       Return        : None
 
       -----------------------------------------------------------------

       Example:

           main:
                   DATA 980 1
                   DATA 990 0x0a
                   DATA 1000 "Hello world"
                   # Number of lines to write
                   DATA 1020 10
                   # Counter
                   DATA 1030 0
                   # Open read
                   DATA 1040 4
                   # Open write
                   DATA 1050 5
                   # Set cursor location
                   DATA 1060 6
                   # Read file
                   DATA 1070 7
                   # Write file
                   DATA 1080 8
                   # Close file
                   DATA 1090 9
                   # Filename
                   DATA 1110 "hello.txt"
                   # Data size
                   DATA 1130 11
                   DATA 1140 "Writing file"
                   DATA 1160 "Reading file"
                   DATA 1180 "Done"
                   DATA 1200 "Unknown error"
                   DATA 1220 512
                   DATA 1230 0
                   CALL 1

           write_file:
                   SPRINTLN 1140s
                   DEL 10s 1220l
                   SET 10l 1050l
                   SET 20s 1110s
                   SYS 1
                   # Store file pointer
                   SET 1250l 20l

                   # Write into file
                   DEL 10s 1220l
                   SET 10l 1080l
                   SET 20l 1250l
                   SET 30l 1130l
                   SET 40s 1000s
                   SYS 1

                   DEL 10s 1220l
                   SET 10l 1080l
                   SET 20l 1250l
                   SET 30l 980l
                   SET 40s 990s
                   SYS 1

                   INC 1030l
                   CMP 1030l 1020l
                   JE 2
                   GOTO 6

           cf_before_read:
                   SPRINTLN 1180s
                   DEL 10s 1220l
                   SET 10l 1090l
                   SET 20l 1250l
                   SYS 1
                   CALL 3

           read_file:
                   SPRINTLN 1160s
                   DEL 10s 1220l
                   SET 10l 1040l
                   SET 20s 1110s
                   SYS 1
                   SET 1250l 20l
                   INC 1030l
                   # Read file
                   DEL 10s 1220l
                   SET 10l 1070l
                   SET 20l 1250l
                   SET 30l 1130l
                   SYS 1
                   SPRINT 30s
                   CMP 20l 1230l
                   JE 4
                   GOTO 7
           exit:
                   SPRINTLN 1180s
                   SET 10l 1090l
                   SET 20l 1250l
                   SYS 1
                   HALT

           on_exception:
                   SPRINTLN 1200s
                   HALT


-------------------------------------------------------------------------------
