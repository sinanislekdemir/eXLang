;;; main -- My main emacs file

;;; Commentary:
(require 'package)

;;; Code:
(add-to-list 'package-archives
             '("melpa" . "http://melpa.org/packages/") t)
(add-to-list 'package-archives  '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
(add-to-list 'package-archives '("gnu" . "https://elpa.gnu.org/packages/"))
(package-initialize)

;; INSTALL DEPENDENCIES

(unless (package-installed-p 'company)
  (package-install 'company))

(unless (package-installed-p 'cov)
  (package-install 'cov))

(unless (package-installed-p 'company-irony)
  (package-install 'company-irony))

(unless (package-installed-p 'company-box)
  (package-install 'company-box))

(unless (package-installed-p 'ccls)
  (package-install 'ccls))

;;; Markdown support
(unless (package-installed-p 'markdown-mode)
  (package-install 'markdown-mode))

;;; EditorConfig support
(unless (package-installed-p 'editorconfig)
  (package-install 'editorconfig))

(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(unless (package-installed-p 'projectile)
  (package-install 'projectile))

(unless (package-installed-p 'clang-format)
  (package-install 'clang-format))

(unless (package-installed-p 'treemacs)
  (package-install 'treemacs))

(unless (package-installed-p 'treemacs-all-the-icons)
  (package-install 'treemacs-all-the-icons))

(unless (package-installed-p 'flycheck)
  (package-install 'flycheck))

(unless (package-installed-p 'flycheck-clang-tidy)
  (package-install 'flycheck-clang-tidy))

(unless (package-installed-p 'pyenv-mode)
  (package-install 'pyenv-mode))


;; FLYCHECK
(require 'flycheck)

(use-package flycheck-clang-tidy
  :after flycheck
  :hook
  (flycheck-mode . flycheck-clang-tidy-setup)
  )

(global-flycheck-mode t)

(add-to-list 'display-buffer-alist
             `(,(rx bos "*Flycheck errors*" eos)
              (display-buffer-reuse-window
               display-buffer-in-side-window)
              (side            . bottom)
              (reusable-frames . visible)
              (window-height   . 0.33)))

;; Configure Flycheck for Python with pyright
(flycheck-define-checker python-pyright
  "A Python syntax checker using the Pyright language server."
  :command ("pyright-langserver" "--stdio")
  :error-patterns
  ((error line-start (file-name) ":" line ":" column ": error:" (message) line-end)
   (warning line-start (file-name) ":" line ":" column ": warning:" (message) line-end))
  :modes python-mode)
(add-to-list 'flycheck-checkers 'python-pyright t)

(use-package blacken
  :ensure t)

(use-package py-isort
  :ensure t)

(add-hook 'python-mode-hook 'blacken-mode)
(add-hook 'python-mode-hook 'py-isort-before-save)


;; Enable theme
;;(use-package dracula-theme
;;  :ensure t
;;  :config
;;  (load-theme 'dracula t))
(load-theme 'wombat)

;; Enable EditorConfig
(editorconfig-mode t)
(tool-bar-mode -1)
;; (menu-bar-mode -1)
;; (scroll-bar-mode -1)

(projectile-mode +1)
;; Recommended keymap prefix on Windows/Linux
(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)

;; Enable Eglot
(use-package eglot :ensure t)

;; Configure Eglot Backends
(add-to-list 'eglot-server-programs '((c++-mode c-mode) "ccls"))
(add-to-list 'eglot-server-programs '((python-mode) . ("pyright-langserver" "--stdio"))) ;; pyright - jedi-language-server

;; Enable Eglot
(add-hook 'python-mode-hook 'eglot-ensure)
(add-hook 'c-mode-hook 'eglot-ensure)
(add-hook 'c++-mode-hook 'eglot-ensure)

;; Enable company-mode
(use-package company
  :after eglot
  :hook (eglot-managed-mode . company-mode))
(use-package company-box
  :hook (company-mode . company-box-mode))

(add-hook 'eglot-managed-mode-hook (lambda ()
                                     (flymake-mode -1)))

;; EMACS CONFIG
;; Enable line numbering in `prog-mode'
(add-hook 'prog-mode-hook #'display-line-numbers-mode)

;; Automatically pair parentheses
(electric-pair-mode t)

;; Enabled inline static analysis
;; (add-hook 'prog-mode-hook #'flymake-mode)
(add-hook 'prog-mode-hook #'projectile-mode)

;; Miscellaneous options
(setq-default major-mode
              (lambda () ; guess major mode from file name
                (unless buffer-file-name
                  (let ((buffer-file-name (buffer-name)))
                    (set-auto-mode)))))

(setq window-resize-pixelwise t)
(setq frame-resize-pixelwise t)
(save-place-mode t)
(savehist-mode t)
(recentf-mode t)

;; Store automatic customisation options elsewhere
(setq custom-file (locate-user-emacs-file "custom.el"))
(when (file-exists-p custom-file)
  (load custom-file))

(use-package try :ensure t)
(use-package which-key :ensure t :config (which-key-mode))

;; KEYMAP CUSTOMIZATIONS
(define-key global-map (kbd "M-<up>") 'windmove-up)
(define-key global-map (kbd "M-<down>") 'windmove-down)
(define-key global-map (kbd "M-<left>") 'windmove-left)
(define-key global-map (kbd "M-<right>") 'windmove-right)
(global-set-key (kbd "M-p") 'projectile-find-file)

(defun format-c-mode-hook ()
  (local-set-key (kbd "M-=") 'clang-format-buffer))
(add-hook 'c-mode-hook 'format-c-mode-hook)
(add-hook 'c++-mode-hook 'format-c-mode-hook)

(defun format-buffer-with-black-and-isort ()
  "Format buffer with black and isort."
  (interactive)
  (blacken-buffer)
  (py-isort-buffer))

(add-hook 'python-mode-hook
          (lambda ()
            (local-set-key (kbd "M-=") 'format-buffer-with-black-and-isort)))

(global-set-key (kbd "<f9>") 'treemacs)
(global-set-key (kbd "<f8>") 'flycheck-list-errors)

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
  (setq c-basic-offset 8
	tab-width 8
	indent-tabs-mode t))

(setq inhibit-startup-message t)
(setq initial-scratch-message nil)

;; Set default font
(set-face-attribute 'default nil
                    :family "Hack"
                    :height 110
                    :weight 'normal
                    :width 'normal)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages '(projectile ccls)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
